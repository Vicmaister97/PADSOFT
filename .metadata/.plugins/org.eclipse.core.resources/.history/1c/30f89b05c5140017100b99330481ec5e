package Tests;

import static org.junit.Assert.*;

import org.junit.Test;

import CourseElements.Course;
import CourseElements.Exercise;
import Exercises.SimpleChoice;
import Users.Student;

import java.time.LocalDate;

import org.junit.Before;

public class ExerciseTest {

	private Course course;
	private Student student;
	private Student student2;
	private Student student3;
	private Exercise exerciseNotDone;
	private Exercise exerciseDone;
	private SimpleChoice question1;
	private SimpleChoice question2;
	
	@Before
	public void setUp() throws Exception{
		course = new Course ("Historia del Arte", "Paco", true);
		student = new Student ("Platanito", "nerd68", "Carlos", "Isasa", "1", "platanito@gmail.com");
		student2 = new Student ("Victor", "nerd69", "Victor", "Garcia", "2", "boss@gmail.com");
		student3 = new Student ("Paco", "nerd70", "Paco", "Martinez", "3", "noboss@gmail.com");
		course.addStudent(student);
		course.addStudent(student2);
		exerciseNotDone = new Exercise (course, true, false, LocalDate.now(), LocalDate.now().plusDays(10), "Exercise1", 100, 0);
		question1 = new SimpleChoice (exerciseNotDone, 4, "Who painted Mona Lisa?", false, "Leonardo da Vinci");
		question1.addPossibleAnswer("Leonardo da Vinci");
		question1.addPossibleAnswer("Goya");
		question1.addPossibleAnswer("Velazquez");
		exerciseDone = new Exercise (course, true, false, LocalDate.now(), LocalDate.now().plusDays(10), "Exercise1", 100, 0);
		question2 = new SimpleChoice (exerciseNotDone, 6, "Who painted Guernica?", false, "Picasso");
		question2.addPossibleAnswer("Picasso");
		question2.addPossibleAnswer("Goya");
		question2.addPossibleAnswer("Velazquez");
		exerciseDone.solveExercise(student);
		
	}
	@Test
	public void testSetRandomOrder() {
		assertTrue(exerciseNotDone.setRandomOrder(true));
		assertEquals(exerciseNotDone.isRandomOrder(), true); /*The order must have changed*/
		assertFalse(exerciseDone.setRandomOrder(true)); /*Must fail because the exercise has been already solved*/
	}
	
	@Test
	public void testSetIniDate() {
		assertTrue(exerciseNotDone.setIniDate(LocalDate.now().plusDays(4)));
		assertEquals(exerciseNotDone.getIniDate(), LocalDate.now().plusDays(4)); /*The initial date must have changed*/
		assertFalse(exerciseDone.setIniDate(LocalDate.now().plusDays(4))); /*Must fail because the exercise has been already solved*/
	}
	
	@Test
	public void testSetEndDate() {
		assertTrue(exerciseNotDone.setEndDate(LocalDate.now().plusDays(4)));
		assertEquals(exerciseNotDone.getEndDate(), LocalDate.now().plusDays(4)); /*The end date must have changed*/
		assertFalse(exerciseNotDone.setEndDate(LocalDate.now().minusDays(4)));
		assertFalse(exerciseDone.setIniDate(LocalDate.now().plusDays(4))); /*Must fail because the exercise has been already solved*/
	}

}
